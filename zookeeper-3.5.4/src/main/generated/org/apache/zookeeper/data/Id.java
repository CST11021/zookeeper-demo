// File generated by hadoop record compiler. Do not edit.
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.zookeeper.data;

import org.apache.jute.*;
import org.apache.yetus.audience.InterfaceAudience;

@InterfaceAudience.Public
public class Id implements Record {

    /** scheme表示zk的权限控制模式，分别有：world、auth、digest、ip和super */
    private String scheme;

    /**
     * 表示操作节点的一个或一类用户，它根据授权策略scheme的不同而不同：
     *
     * 1、当scheme是world时，则id只有一个值：anyone，创建节点后，节点默认的权限为：world:anyone:cdrwa，表示任何对都会对该节点有创建子节点和读写删除权限；
     *
     * 2、当scheme是auth时，可以通过：setAcl ${nodePath} auth:${username}:${perms} 命令来设置某个用户对该节点的权限，例如：
     *    setAcl /t1 auth:whz:r
     *    表示用户名为"whz"对"/t1"这个节点有只有读的权限，whz可以通过
     *
     * 3、当scheme是digest时，可以通过：addauth digest ${usernmae}:${password} 命令来添加用户，例如：
     *    addauth digest whz:123456
     *    执行成功后，表示当前连接已经对whz该用户进行了认证，之后可以对/t1节点进行访问了
     *
     * 4、当sheme是ip时，可以通过：setAcl ${nodePatch} ip:${IP}:${perms} 命令来设置指定客户端对该节点的权限，例如：
     *    setAcl /t3 ip:192.168.0.164:r
     *    表示192.168.0.164这个客户端对/t3这个节点只有读权限
     */
    private String id;

    public Id() {
    }

    public Id(String scheme, String id) {
        this.scheme = scheme;
        this.id = id;
    }

    public String getScheme() {
        return scheme;
    }

    public void setScheme(String m_) {
        scheme = m_;
    }

    public String getId() {
        return id;
    }

    public void setId(String m_) {
        id = m_;
    }

    public void serialize(OutputArchive a_, String tag) throws java.io.IOException {
        a_.startRecord(this, tag);
        a_.writeString(scheme, "scheme");
        a_.writeString(id, "id");
        a_.endRecord(this, tag);
    }

    public void deserialize(InputArchive a_, String tag) throws java.io.IOException {
        a_.startRecord(tag);
        scheme = a_.readString("scheme");
        id = a_.readString("id");
        a_.endRecord(tag);
    }

    public String toString() {
        try {
            java.io.ByteArrayOutputStream s =
                    new java.io.ByteArrayOutputStream();
            CsvOutputArchive a_ =
                    new CsvOutputArchive(s);
            a_.startRecord(this, "");
            a_.writeString(scheme, "scheme");
            a_.writeString(id, "id");
            a_.endRecord(this, "");
            return new String(s.toByteArray(), "UTF-8");
        } catch (Throwable ex) {
            ex.printStackTrace();
        }
        return "ERROR";
    }

    public void write(java.io.DataOutput out) throws java.io.IOException {
        BinaryOutputArchive archive = new BinaryOutputArchive(out);
        serialize(archive, "");
    }

    public void readFields(java.io.DataInput in) throws java.io.IOException {
        BinaryInputArchive archive = new BinaryInputArchive(in);
        deserialize(archive, "");
    }

    public int compareTo(Object peer_) throws ClassCastException {
        if (!(peer_ instanceof Id)) {
            throw new ClassCastException("Comparing different types of records.");
        }
        Id peer = (Id) peer_;
        int ret = 0;
        ret = scheme.compareTo(peer.scheme);
        if (ret != 0) return ret;
        ret = id.compareTo(peer.id);
        if (ret != 0) return ret;
        return ret;
    }

    public boolean equals(Object peer_) {
        if (!(peer_ instanceof Id)) {
            return false;
        }
        if (peer_ == this) {
            return true;
        }
        Id peer = (Id) peer_;
        boolean ret = false;
        ret = scheme.equals(peer.scheme);
        if (!ret) return ret;
        ret = id.equals(peer.id);
        if (!ret) return ret;
        return ret;
    }

    public int hashCode() {
        int result = 17;
        int ret;
        ret = scheme.hashCode();
        result = 37 * result + ret;
        ret = id.hashCode();
        result = 37 * result + ret;
        return result;
    }

    public static String signature() {
        return "LId(ss)";
    }
}
