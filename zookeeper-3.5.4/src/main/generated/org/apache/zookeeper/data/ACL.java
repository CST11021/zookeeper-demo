// File generated by hadoop record compiler. Do not edit.
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.zookeeper.data;

import org.apache.jute.*;
import org.apache.yetus.audience.InterfaceAudience;

/**
 * 一、scheme和id：
 *  world: 它下面只有一个id, 叫anyone, world:anyone代表任何人，zookeeper中对所有人有权限的结点就是属于world:anyone的
 *  auth: 它不需要id, 只要是通过authentication的user都有权限（zookeeper支持通过kerberos来进行authencation, 也支持username/password形式的authentication)
 *  digest: 它对应的id为username:BASE64(SHA1(password))，它需要先通过username:password形式的authentication
 *  ip: 它对应的id为客户机的IP地址，设置的时候可以设置一个ip段，比如ip:192.168.1.0/16, 表示匹配前16个bit的IP段
 *  super: 在这种scheme情况下，对应的id拥有超级权限，可以做任何事情(cdrwa)
 *
 * 二、permissions：
 *  CREATE(c): 创建权限，可以在在当前node下创建child node
 *  DELETE(d): 删除权限，可以删除当前的node
 *  READ(r): 读权限，可以获取当前node的数据，可以list当前node所有的child nodes
 *  WRITE(w): 写权限，可以向当前node写数据
 *  ADMIN(a): 管理权限，可以设置当前node的permission
 */
@InterfaceAudience.Public
public class ACL implements Record {

    /** 对应{@link org.apache.zookeeper.ZooDefs.Perms}增删改查等权限值 */
    private int perms;

    /** 封装权限模式及对应的权限 */
    private org.apache.zookeeper.data.Id id;

    public ACL() {
    }

    public ACL(int perms, org.apache.zookeeper.data.Id id) {
        this.perms = perms;
        this.id = id;
    }

    public int getPerms() {
        return perms;
    }

    public void setPerms(int m_) {
        perms = m_;
    }

    public org.apache.zookeeper.data.Id getId() {
        return id;
    }

    public void setId(org.apache.zookeeper.data.Id m_) {
        id = m_;
    }

    public void serialize(OutputArchive a_, String tag) throws java.io.IOException {
        a_.startRecord(this, tag);
        a_.writeInt(perms, "perms");
        a_.writeRecord(id, "id");
        a_.endRecord(this, tag);
    }

    public void deserialize(InputArchive a_, String tag) throws java.io.IOException {
        a_.startRecord(tag);
        perms = a_.readInt("perms");
        id = new org.apache.zookeeper.data.Id();
        a_.readRecord(id, "id");
        a_.endRecord(tag);
    }

    public String toString() {
        try {
            java.io.ByteArrayOutputStream s =
                    new java.io.ByteArrayOutputStream();
            CsvOutputArchive a_ =
                    new CsvOutputArchive(s);
            a_.startRecord(this, "");
            a_.writeInt(perms, "perms");
            a_.writeRecord(id, "id");
            a_.endRecord(this, "");
            return new String(s.toByteArray(), "UTF-8");
        } catch (Throwable ex) {
            ex.printStackTrace();
        }
        return "ERROR";
    }

    public void write(java.io.DataOutput out) throws java.io.IOException {
        BinaryOutputArchive archive = new BinaryOutputArchive(out);
        serialize(archive, "");
    }

    public void readFields(java.io.DataInput in) throws java.io.IOException {
        BinaryInputArchive archive = new BinaryInputArchive(in);
        deserialize(archive, "");
    }

    public int compareTo(Object peer_) throws ClassCastException {
        if (!(peer_ instanceof ACL)) {
            throw new ClassCastException("Comparing different types of records.");
        }
        ACL peer = (ACL) peer_;
        int ret = 0;
        ret = (perms == peer.perms) ? 0 : ((perms < peer.perms) ? -1 : 1);
        if (ret != 0) return ret;
        ret = id.compareTo(peer.id);
        if (ret != 0) return ret;
        return ret;
    }

    public boolean equals(Object peer_) {
        if (!(peer_ instanceof ACL)) {
            return false;
        }
        if (peer_ == this) {
            return true;
        }
        ACL peer = (ACL) peer_;
        boolean ret = false;
        ret = (perms == peer.perms);
        if (!ret) return ret;
        ret = id.equals(peer.id);
        if (!ret) return ret;
        return ret;
    }

    public int hashCode() {
        int result = 17;
        int ret;
        ret = (int) perms;
        result = 37 * result + ret;
        ret = id.hashCode();
        result = 37 * result + ret;
        return result;
    }

    public static String signature() {
        return "LACL(iLId(ss))";
    }
}
